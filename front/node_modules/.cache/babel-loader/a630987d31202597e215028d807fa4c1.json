{"ast":null,"code":"var _jsxFileName = \"/Users/leedy2491/Document/Develope/BootCampLetter/front/src/components/views/Private/PrivateLetter.tsx\";\nimport React from 'react';\nimport { Button, Form, Input } from \"antd\";\nimport axios from 'axios';\nimport { SendOutlined } from '@ant-design/icons';\nimport './PrivateLetterForm.css.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  TextArea\n} = Input;\nexport default function PrivateLetter() {\n  const onConfirm = async values => {\n    let letter = {\n      title: values.title,\n      contents: values.contents\n    };\n    console.log(letter);\n    axios.post('/api/privateLetter', letter).then(response => {\n      if (response.data.success) {\n        alert(\"편지를 전송하였습니다.\");\n        window.location.reload();\n      } else {\n        alert('편지 보내기에 실패햐였습니다.');\n      }\n    });\n  };\n\n  const onConfirmFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n    alert(\"편지 보내기에 실패하셨습니다. 잠시후 다시 시도해주세요.\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      className: \"form-container\",\n      name: \"basic\",\n      labelCol: {\n        span: 5\n      },\n      wrapperCol: {\n        span: 16\n      },\n      initialValues: {\n        remember: true\n      },\n      onFinish: onConfirm,\n      onFinishFailed: onConfirmFailed,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"\\uC81C\\uBAA9\",\n        name: \"title\",\n        rules: [{\n          required: true,\n          message: '제목을 입력해주세요!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          placeholder: \"\\uC81C\\uBAA9\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          allowClear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"\\uB0B4\\uC6A9\",\n        name: \"contents\",\n        rules: [{\n          required: true,\n          message: '내용을 입력해주세요!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(TextArea, {\n          placeholder: \"\\uBCF4\\uB0BC \\uD3B8\\uC9C0 \\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n          showCount: true,\n          maxLength: 1490,\n          rows: 5,\n          allowClear: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        wrapperCol: {\n          xs: {\n            offset: 0,\n            span: 16\n          },\n          lg: {\n            offset: 5,\n            span: 16\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 35\n          }, this),\n          type: \"primary\",\n          shape: \"round\",\n          htmlType: \"submit\",\n          children: \"\\uD3B8\\uC9C0 \\uBCF4\\uB0B4\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_c = PrivateLetter;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateLetter\");","map":{"version":3,"sources":["/Users/leedy2491/Document/Develope/BootCampLetter/front/src/components/views/Private/PrivateLetter.tsx"],"names":["React","Button","Form","Input","axios","SendOutlined","TextArea","PrivateLetter","onConfirm","values","letter","title","contents","console","log","post","then","response","data","success","alert","window","location","reload","onConfirmFailed","errorInfo","span","remember","required","message","xs","offset","lg"],"mappings":";AAAA,OAAOA,KAAP,MAAoC,OAApC;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAkC,MAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAO,6BAAP;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeH,KAArB;AAEA,eAAe,SAASI,aAAT,GAAuC;AAClD,QAAMC,SAAS,GAAG,MAAOC,MAAP,IAAuB;AACrC,QAAIC,MAAM,GAAG;AACTC,MAAAA,KAAK,EAAEF,MAAM,CAACE,KADL;AAETC,MAAAA,QAAQ,EAAEH,MAAM,CAACG;AAFR,KAAb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAN,IAAAA,KAAK,CAACW,IAAN,CAAW,oBAAX,EAAiCL,MAAjC,EACKM,IADL,CACUC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAlB,EAA2B;AACvBC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,OAHD,MAGO;AACHH,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACH;AACJ,KARL;AASH,GAfD;;AAiBA,QAAMI,eAAe,GAAIC,SAAD,IAAoB;AACxCZ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,SAAvB;AACAL,IAAAA,KAAK,CAAC,iCAAD,CAAL;AACH,GAHD;;AAKA,sBACI;AAAA,2BACI,QAAC,IAAD;AACI,MAAA,SAAS,EAAC,gBADd;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,QAAQ,EAAE;AAAEM,QAAAA,IAAI,EAAE;AAAR,OAHd;AAII,MAAA,UAAU,EAAE;AAAEA,QAAAA,IAAI,EAAE;AAAR,OAJhB;AAKI,MAAA,aAAa,EAAE;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OALnB;AAMI,MAAA,QAAQ,EAAEnB,SANd;AAOI,MAAA,cAAc,EAAEgB,eAPpB;AAAA,8BASI,QAAC,IAAD,CAAM,IAAN;AACI,QAAA,KAAK,EAAC,cADV;AAEI,QAAA,IAAI,EAAC,OAFT;AAGI,QAAA,KAAK,EAAE,CAAC;AAAEI,UAAAA,QAAQ,EAAE,IAAZ;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAHX;AAAA,+BAKI,QAAC,KAAD;AAAO,UAAA,WAAW,EAAC,0DAAnB;AAAiC,UAAA,UAAU;AAA3C;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI,QAAC,IAAD,CAAM,IAAN;AACI,QAAA,KAAK,EAAC,cADV;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,KAAK,EAAE,CAAC;AAAED,UAAAA,QAAQ,EAAE,IAAZ;AAAkBC,UAAAA,OAAO,EAAE;AAA3B,SAAD,CAHX;AAAA,+BAKI,QAAC,QAAD;AAAU,UAAA,WAAW,EAAC,oFAAtB;AAA0C,UAAA,SAAS,MAAnD;AAAoD,UAAA,SAAS,EAAE,IAA/D;AAAqE,UAAA,IAAI,EAAE,CAA3E;AAA8E,UAAA,UAAU;AAAxF;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,cAjBJ,eAwBI,QAAC,IAAD,CAAM,IAAN;AAAW,QAAA,UAAU,EAAE;AAAEC,UAAAA,EAAE,EAAE;AAACC,YAAAA,MAAM,EAAC,CAAR;AAAWL,YAAAA,IAAI,EAAE;AAAjB,WAAN;AAA4BM,UAAAA,EAAE,EAAE;AAACD,YAAAA,MAAM,EAAC,CAAR;AAAWL,YAAAA,IAAI,EAAE;AAAjB;AAAhC,SAAvB;AAAA,+BACI,QAAC,MAAD;AAAQ,UAAA,IAAI,eAAE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,kBAAd;AAAgC,UAAA,IAAI,EAAC,SAArC;AAA+C,UAAA,KAAK,EAAC,OAArD;AAA6D,UAAA,QAAQ,EAAC,QAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAkCH;KAzDuBnB,a","sourcesContent":["import React, { ReactElement } from 'react'\nimport {Button, Form, Input} from \"antd\";\nimport axios from 'axios';\nimport { SendOutlined } from '@ant-design/icons';\nimport './PrivateLetterForm.css.css'\nconst { TextArea } = Input;\n\nexport default function PrivateLetter(): ReactElement {\n    const onConfirm = async (values: any) => {\n        let letter = {\n            title: values.title,\n            contents: values.contents\n        }\n        console.log(letter)\n        axios.post('/api/privateLetter', letter)\n            .then(response => {\n                if (response.data.success) {\n                    alert(\"편지를 전송하였습니다.\")\n                    window.location.reload();\n                } else {\n                    alert('편지 보내기에 실패햐였습니다.')\n                }\n            })\n    };\n\n    const onConfirmFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo);\n        alert(\"편지 보내기에 실패하셨습니다. 잠시후 다시 시도해주세요.\")\n    };\n\n    return (\n        <div>\n            <Form\n                className='form-container'\n                name=\"basic\"\n                labelCol={{ span: 5 }}\n                wrapperCol={{ span: 16 }}\n                initialValues={{ remember: true }}\n                onFinish={onConfirm}\n                onFinishFailed={onConfirmFailed}\n            >\n                <Form.Item\n                    label=\"제목\"\n                    name=\"title\"\n                    rules={[{ required: true, message: '제목을 입력해주세요!' }]}\n                >\n                    <Input placeholder=\"제목을 입력해주세요.\" allowClear  />\n                </Form.Item>\n\n                <Form.Item\n                    label=\"내용\"\n                    name=\"contents\"\n                    rules={[{ required: true, message: '내용을 입력해주세요!' }]}\n                >\n                    <TextArea placeholder=\"보낼 편지 내용을 입력해주세요.\" showCount maxLength={1490} rows={5} allowClear  />\n                </Form.Item>\n                <Form.Item wrapperCol={{ xs: {offset:0, span: 16}, lg: {offset:5, span: 16} }}>\n                    <Button icon={<SendOutlined />} type=\"primary\" shape=\"round\" htmlType=\"submit\">\n                        편지 보내기\n                    </Button>\n                </Form.Item>\n            </Form >\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}