{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * 헤더의 쿠키 문자열에서 세션 식별을 위한 kvp를 찾는다.\n * @param cookies - 헤더의 쿠키 값\n */\n\nfunction extractCookies(cookies) {\n  if (cookies.length === 0) {\n    throw new Error('The cookie values in the header are empty.');\n  }\n\n  var iuid = cookies.filter(function (cookie) {\n    return cookie.includes('iuid=');\n  })[0];\n  var token = cookies.filter(function (cookie) {\n    return cookie.includes('Token=');\n  })[0];\n  return {\n    iuid: iuid.slice(0, iuid.indexOf(';')),\n    token: token.slice(0, token.indexOf(';'))\n  };\n}\n\nexports.extractCookies = extractCookies;","map":{"version":3,"sources":["/Users/leedy2491/Document/Develope/BootCampLetter/node_modules/the-camp-lib/dist/utils/extractCookies.js"],"names":["Object","defineProperty","exports","value","extractCookies","cookies","length","Error","iuid","filter","cookie","includes","token","slice","indexOf"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC7B,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACtB,UAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACH;;AACD,MAAIC,IAAI,GAAGH,OAAO,CAACI,MAAR,CAAe,UAAUC,MAAV,EAAkB;AACxC,WAAOA,MAAM,CAACC,QAAP,CAAgB,OAAhB,CAAP;AACH,GAFU,EAER,CAFQ,CAAX;AAGA,MAAIC,KAAK,GAAGP,OAAO,CAACI,MAAR,CAAe,UAAUC,MAAV,EAAkB;AACzC,WAAOA,MAAM,CAACC,QAAP,CAAgB,QAAhB,CAAP;AACH,GAFW,EAET,CAFS,CAAZ;AAGA,SAAO;AACHH,IAAAA,IAAI,EAAEA,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcL,IAAI,CAACM,OAAL,CAAa,GAAb,CAAd,CADH;AAEHF,IAAAA,KAAK,EAAEA,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAeD,KAAK,CAACE,OAAN,CAAc,GAAd,CAAf;AAFJ,GAAP;AAIH;;AACDZ,OAAO,CAACE,cAAR,GAAyBA,cAAzB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * 헤더의 쿠키 문자열에서 세션 식별을 위한 kvp를 찾는다.\n * @param cookies - 헤더의 쿠키 값\n */\nfunction extractCookies(cookies) {\n    if (cookies.length === 0) {\n        throw new Error('The cookie values in the header are empty.');\n    }\n    var iuid = cookies.filter(function (cookie) {\n        return cookie.includes('iuid=');\n    })[0];\n    var token = cookies.filter(function (cookie) {\n        return cookie.includes('Token=');\n    })[0];\n    return {\n        iuid: iuid.slice(0, iuid.indexOf(';')),\n        token: token.slice(0, token.indexOf(';')),\n    };\n}\nexports.extractCookies = extractCookies;\n"]},"metadata":{},"sourceType":"script"}