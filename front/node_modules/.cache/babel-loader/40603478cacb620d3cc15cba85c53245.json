{"ast":null,"code":"const fs = require('fs');\n\nconst express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst app = express();\n/** use() 영역 */\n\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\n/** setting 영역 */\n\napp.locals.pretty = true;\n/** set() 영역 */\n\napp.set('views', './views_file');\napp.set('view engine', 'pug');\napp.listen('9100', () => {\n  console.log('---- Connected 9100 port from app_file.js ----');\n});\nexport default function LetterConverJson(user, title, contents) {\n  const directory = \"../TempLetter/\";\n  var Data = {\n    User: user,\n    Title: title,\n    Contents: contents\n  };\n  console.log(user, title, contents, Data);\n\n  const getTitle = user => {\n    const d = new Date();\n    const yyyy = d.getFullYear();\n    const mm = d.getMonth() + 1;\n    const dd = d.getDate();\n    const hh = d.getHours();\n    const m = d.getMinutes();\n    const s = d.getSeconds();\n    return `${yyyy}.${mm}.${dd}/${hh}.${m}.${s}.${user}`;\n  };\n\n  app.post('/topic', (req, res) => {\n    var title = req.body.title;\n    var description = req.body.description;\n    fs.writeFile('data/' + title, description, err => {\n      if (err) {\n        // 에러가 발생하면 500 코드를 반환시키고 에러 메시지를 출력해준다.\n        console.log(err);\n        res.status(500).send('Internal Server Error');\n      }\n\n      res.send('성공!');\n    });\n  });\n  fs.writeFile(\"../TempLetter/temp.json\", JSON.stringify(Data), function (err) {\n    if (err) console.log('파일 쓰기 에러');\n  });\n}\n_c = LetterConverJson;\n\nvar _c;\n\n$RefreshReg$(_c, \"LetterConverJson\");","map":{"version":3,"sources":["/Users/leedy2491/Document/Develope/BootCampLetter/src/components/views/Letter/Sections/LetterApi/LetterConvertJson.ts"],"names":["fs","require","express","bodyParser","app","use","urlencoded","extended","locals","pretty","set","listen","console","log","LetterConverJson","user","title","contents","directory","Data","User","Title","Contents","getTitle","d","Date","yyyy","getFullYear","mm","getMonth","dd","getDate","hh","getHours","m","getMinutes","s","getSeconds","post","req","res","body","description","writeFile","err","status","send","JSON","stringify"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMG,GAAG,GAAGF,OAAO,EAAnB;AAEA;;AACAE,GAAG,CAACC,GAAJ,CAAQF,UAAU,CAACG,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAtB,CAAR;AAEA;;AACAH,GAAG,CAACI,MAAJ,CAAWC,MAAX,GAAoB,IAApB;AAEA;;AACAL,GAAG,CAACM,GAAJ,CAAQ,OAAR,EAAiB,cAAjB;AACAN,GAAG,CAACM,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AAEAN,GAAG,CAACO,MAAJ,CAAW,MAAX,EAAmB,MAAM;AACrBC,EAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACH,CAFD;AAKA,eAAe,SAASC,gBAAT,CAA0BC,IAA1B,EAAwCC,KAAxC,EAAuDC,QAAvD,EAAyE;AACpF,QAAMC,SAAS,GAAG,gBAAlB;AACA,MAAIC,IAAI,GAAG;AACPC,IAAAA,IAAI,EAAEL,IADC;AAEPM,IAAAA,KAAK,EAAEL,KAFA;AAGPM,IAAAA,QAAQ,EAAEL;AAHH,GAAX;AAKAL,EAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ,EAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCE,IAAnC;;AACA,QAAMI,QAAQ,GAAIR,IAAD,IAAkB;AAC/B,UAAMS,CAAC,GAAG,IAAIC,IAAJ,EAAV;AACA,UAAMC,IAAI,GAAGF,CAAC,CAACG,WAAF,EAAb;AACA,UAAMC,EAAE,GAAGJ,CAAC,CAACK,QAAF,KAAe,CAA1B;AACA,UAAMC,EAAE,GAAGN,CAAC,CAACO,OAAF,EAAX;AACA,UAAMC,EAAE,GAAGR,CAAC,CAACS,QAAF,EAAX;AACA,UAAMC,CAAC,GAAGV,CAAC,CAACW,UAAF,EAAV;AACA,UAAMC,CAAC,GAAGZ,CAAC,CAACa,UAAF,EAAV;AACA,WAAQ,GAAEX,IAAK,IAAGE,EAAG,IAAGE,EAAG,IAAGE,EAAG,IAAGE,CAAE,IAAGE,CAAE,IAAGrB,IAAK,EAAnD;AACH,GATD;;AAWAX,EAAAA,GAAG,CAACkC,IAAJ,CAAS,QAAT,EAAmB,CAACC,GAAD,EAAUC,GAAV,KAAsB;AACrC,QAAIxB,KAAK,GAAGuB,GAAG,CAACE,IAAJ,CAASzB,KAArB;AACA,QAAI0B,WAAW,GAAGH,GAAG,CAACE,IAAJ,CAASC,WAA3B;AACA1C,IAAAA,EAAE,CAAC2C,SAAH,CAAa,UAAU3B,KAAvB,EAA8B0B,WAA9B,EAA4CE,GAAD,IAAa;AACpD,UAAGA,GAAH,EAAQ;AACJ;AACAhC,QAAAA,OAAO,CAACC,GAAR,CAAY+B,GAAZ;AACAJ,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACH;;AACDN,MAAAA,GAAG,CAACM,IAAJ,CAAS,KAAT;AACH,KAPD;AAQH,GAXD;AAcA9C,EAAAA,EAAE,CAAC2C,SAAH,CAAa,yBAAb,EAAwCI,IAAI,CAACC,SAAL,CAAe7B,IAAf,CAAxC,EAA8D,UAAUyB,GAAV,EAAoB;AAC9E,QAAIA,GAAJ,EACIhC,OAAO,CAACC,GAAR,CAAY,UAAZ;AACP,GAHD;AAIH;KArCuBC,gB","sourcesContent":["const fs = require('fs');\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\n/** use() 영역 */\napp.use(bodyParser.urlencoded({extended: false}));\n\n/** setting 영역 */\napp.locals.pretty = true;\n\n/** set() 영역 */\napp.set('views', './views_file');\napp.set('view engine', 'pug');\n\napp.listen('9100', () => {\n    console.log('---- Connected 9100 port from app_file.js ----');\n});\n\n\nexport default function LetterConverJson(user: string, title: string, contents: string) {\n    const directory = \"../TempLetter/\"\n    var Data = {\n        User: user,\n        Title: title,\n        Contents: contents\n    }\n    console.log(user, title, contents, Data)\n    const getTitle = (user: string) => {\n        const d = new Date();\n        const yyyy = d.getFullYear();\n        const mm = d.getMonth() + 1;\n        const dd = d.getDate();\n        const hh = d.getHours();\n        const m = d.getMinutes();\n        const s = d.getSeconds()\n        return `${yyyy}.${mm}.${dd}/${hh}.${m}.${s}.${user}`;\n    };\n\n    app.post('/topic', (req:any, res:any) => {\n        var title = req.body.title;\n        var description = req.body.description;\n        fs.writeFile('data/' + title, description, (err:any) => {\n            if(err) {\n                // 에러가 발생하면 500 코드를 반환시키고 에러 메시지를 출력해준다.\n                console.log(err);\n                res.status(500).send('Internal Server Error');\n            }\n            res.send('성공!');\n        });\n    });\n\n\n    fs.writeFile(\"../TempLetter/temp.json\", JSON.stringify(Data), function (err: any) {\n        if (err)\n            console.log('파일 쓰기 에러');\n    });\n}"]},"metadata":{},"sourceType":"module"}